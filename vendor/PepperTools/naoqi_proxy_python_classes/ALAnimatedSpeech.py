#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alanimatedspeechproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALAnimatedSpeech(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None 

    def force_connect(self):
        self.proxy = self.session.service("ALAnimatedSpeech")

    def addTagsToWords(self, tagsToWords):
        """Add some new links between tags and words.

        :param AL::ALValue tagsToWords: Map of tags to words.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.addTagsToWords(tagsToWords)

    def declareAnimationsPackage(self, animationsPackage):
        """Add a new package that contains animations.

        :param str animationsPackage: The new package that contains animations.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.declareAnimationsPackage(animationsPackage)

    def declareTagForAnimations(self, tagsToAnimations):
        """Declare some tags with the associated animations.

        :param AL::ALValue tagsToAnimations: Map of Tags to Animations.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.declareTagForAnimations(tagsToAnimations)

    def getBodyLanguageMode(self):
        """Set the current body language mode. 3 modes exist: BODY_LANGUAGE_MODE_DISABLED,BODY_LANGUAGE_MODE_RANDOM and BODY_LANGUAGE_MODE_CONTEXTUAL (see BodyLanguageMode enum for more details)

        :returns qi::uint32_t: The current body language mode.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.getBodyLanguageMode()

    def getBodyLanguageModeToStr(self):
        """Set the current body language mode. 3 modes exist: "disabled", "random" and "contextual" (see BodyLanguageMode enum for more details)

        :returns str: The current body language mode.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.getBodyLanguageModeToStr()

    def isBodyLanguageEnabled(self):
        """DEPRECATED since 1.22: use getBodyLanguageMode instead.Indicate if the body language is enabled or not.

        :returns bool: The boolean value: true means it is enabled, false means it is disabled.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.isBodyLanguageEnabled()

    def isBodyTalkEnabled(self):
        """DEPRECATED since 1.18: use getBodyLanguageMode instead.Indicate if the body talk is enabled or not.

        :returns bool: The boolean value: true means it is enabled, false means it is disabled.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.isBodyTalkEnabled()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.ping()

    def say(self, text):
        """Say the annotated text given in parameter and animate it with animations inserted in the text.

        :param str text: An annotated text (for example: "Hello. ^start(Hey_1) My name is NAO").
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.say(text)

    def say2(self, text, session):
        """Say the annotated text given in parameter and animate it with animations inserted in the text.

        :param str text: An annotated text (for example: "Hello. ^start(Hey_1) My name is NAO").
        :param AL::ALValue session: The animated speech session.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.say(text, session)

    def setBodyLanguageEnabled(self, enable):
        """DEPRECATED since 1.22: use setBodyLanguageMode instead.Enable or disable the automatic body language on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.

        :param bool enable: The boolean value: true to enable, false to disable.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.setBodyLanguageEnabled(enable)

    def setBodyLanguageMode(self, bodyLanguageMode):
        """Set the current body language mode. 3 modes exist: BODY_LANGUAGE_MODE_DISABLED,BODY_LANGUAGE_MODE_RANDOM and BODY_LANGUAGE_MODE_CONTEXTUAL (see BodyLanguageMode enum for more details)

        :param qi::uint32_t bodyLanguageMode: The choosen body language mode.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.setBodyLanguageMode(bodyLanguageMode)

    def setBodyLanguageModeFromStr(self, stringBodyLanguageMode):
        """Set the current body language mode. 3 modes exist: "disabled", "random" and "contextual" (see BodyLanguageMode enum for more details)

        :param str stringBodyLanguageMode: The choosen body language mode.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.setBodyLanguageModeFromStr(stringBodyLanguageMode)

    def setBodyTalkEnabled(self, enable):
        """DEPRECATED since 1.18: use setBodyLanguageMode instead.Enable or disable the automatic body talk on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.

        :param bool enable: The boolean value: true to enable, false to disable.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.setBodyTalkEnabled(enable)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALAnimatedSpeech")
        return self.proxy.version()
