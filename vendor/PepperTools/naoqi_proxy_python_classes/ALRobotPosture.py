#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alrobotpostureproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALRobotPosture(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALRobotPosture")

    def applyPosture(self, postureName, maxSpeedFraction):
        """Set the angle of the joints of the  robot to the choosen posture.

        :param str postureName: Name of the desired posture. Use getPostureList to get the list of posture name available.
        :param float maxSpeedFraction: A fraction.
        :returns bool: Returns if the posture was reached or not.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.applyPosture(postureName, maxSpeedFraction)

    def getPosture(self):
        """Determine posture.

        :returns str: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.getPosture()

    def getPostureFamily(self):
        """Returns the posture family for example Standing, LyingBelly,...

        :returns str: Returns the posture family, e.g. Standing.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.getPostureFamily()

    def getPostureFamilyList(self):
        """Get the list of posture family names available.

        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.getPostureFamilyList()

    def getPostureList(self):
        """Get the list of posture names available.

        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.getPostureList()

    def goToPosture(self, postureName, maxSpeedFraction):
        """Make the robot go to the choosenposture.

        :param str postureName: Name of the desired posture. Use getPostureList to get the list of posture name available.
        :param float maxSpeedFraction: A fraction.
        :returns bool: Returns if the posture was reached or not.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.goToPosture(postureName, maxSpeedFraction)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.ping()

    def setMaxTryNumber(self, pMaxTryNumber):
        """Set maximum of tries ongoToPosture fail.

        :param int pMaxTryNumber: Number of retry if goToPosture fail.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.setMaxTryNumber(pMaxTryNumber)

    def stopMove(self):
        """Stop the posture move.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.stopMove()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRobotPosture")
        return self.proxy.version()
