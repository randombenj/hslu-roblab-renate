#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/altexttospeechproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALTextToSpeech(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALTextToSpeech")

    def disableNotifications(self):
        """Disables the notifications puted in ALMemory during the synthesis (TextStarted, TextDone, CurrentBookMark, CurrentWord, ...)
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.disableNotifications()

    def enableNotifications(self):
        """Enables the notifications puted in ALMemory during the synthesis (TextStarted, TextDone, CurrentBookMark, CurrentWord, ...)
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.enableNotifications()

    def getAvailableLanguages(self):
        """Outputs the languages installed on the system.

        :returns std::vector<std::string>: Array of std::string that contains the languages installed on the system.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getAvailableLanguages()

    def getAvailableVoices(self):
        """Outputs the available voices. The returned list contains the voice IDs.

        :returns std::vector<std::string>: Array of std::string containing the voices installed on the system.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getAvailableVoices()

    def getLanguage(self):
        """Returns the language currently used by the text-to-speech engine.

        :returns str: Language of the current voice.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getLanguage()

    def getLanguageEncoding(self, pLanguage):
        """Returns the encoding that should be used with the specified language.

        :param str pLanguage: Language name (as a std::string). Must belong to the languages available in TTS.
        :returns str: Encoding of the specified language.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getLanguageEncoding(pLanguage)

    def getParameter(self, pParameterName):
        """Returns the value of one of the voice parameters. The available parameters are: "pitchShift", "doubleVoice","doubleVoiceLevel" and "doubleVoiceTimeShift"

        :param str pParameterName: Name of the parameter.
        :returns float: Value of the specified parameter
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getParameter(pParameterName)

    def getSupportedLanguages(self):
        """Outputs all the languages supported (may be installed or not).

        :returns std::vector<std::string>: Array of std::string that contains all the supported languages (may be installed or not).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getSupportedLanguages()

    def getVoice(self):
        """Returns the voice currently used by the text-to-speech engine.

        :returns str: Name of the current voice
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getVoice()

    def getVolume(self):
        """Fetches the current volume the text to speech.

        :returns float: Volume (integer between 0 and 100).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.getVolume()

    def loadVoicePreference(self, pPreferenceName):
        """Loads a set of voice parameters defined in a xml file contained in the preferences folder.The name of the xml file must begin with ALTextToSpeech_Voice_

        :param str pPreferenceName: Name of the voice preference.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.loadVoicePreference(pPreferenceName)

    def locale(self):
        """Get the locale associate to the current language.

        :returns str: A string with xx_XX format (region_country)
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.locale()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.ping()

    def resetSpeed(self):
        """Changes the parameters of the voice. For now, it is only possible to reset the voice speed.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.resetSpeed()

    def say(self, stringToSay):
        """Performs the text-to-speech operations : it takes a std::string as input and outputs a sound in both speakers. String encoding must be UTF8.

        :param str stringToSay: Text to say, encoded in UTF-8.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.say(stringToSay)

    def say2(self, stringToSay, language):
        """Performs the text-to-speech operations in a specific language: it takes a std::string as input and outputs a sound in both speakers. String encoding must be UTF8. Once the text is said, the language is set back to its initial value.

        :param str stringToSay: Text to say, encoded in UTF-8.
        :param str language: Language used to say the text.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.say(stringToSay, language)

    def sayToFile(self, pStringToSay, pFileName):
        """Performs the text-to-speech operations: it takes a std::string as input and outputs the corresponding audio signal in the specified file.

        :param str pStringToSay: Text to say, encoded in UTF-8.
        :param str pFileName: RAW file where to store the generated signal. The signal is encoded with a sample rate of 22050Hz, format S16_LE, 2 channels.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.sayToFile(pStringToSay, pFileName)

    def sayToFileAndPlay(self, pStringToSay):
        """This method performs the text-to-speech operations: it takes a std::string, outputs the synthesis resulting audio signal in a file, and then plays the audio file. The file is deleted afterwards. It is useful when you want to perform a short synthesis, when few CPU is available. Do not use it if you want a low-latency synthesis or to synthesize a long std::string.

        :param str pStringToSay: Text to say, encoded in UTF-8.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.sayToFileAndPlay(pStringToSay)

    def setLanguage(self, pLanguage):
        """Changes the language used by the Text-to-Speech engine. It automatically changes the voice used since each of them is related to a unique language. If you want that change to take effect automatically after reboot of your robot, refer to the robot web page (setting page).

        :param str pLanguage: Language name. Must belong to the languages available in TTS (can be obtained with the getAvailableLanguages method).  It should be an identifier std::string.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.setLanguage(pLanguage)

    def setLanguageDefaultVoice(self, Language, Voice):
        """Sets a voice as the default voice for the corresponding language

        :param str Language: The language among those available on your robot as a String
        :param str Voice: The voice among those available on your robot as a String
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.setLanguageDefaultVoice(Language, Voice)

    def setParameter(self, pEffectName, pEffectValue):
        """Changes the parameters of the voice. The available parameters are:   	 pitchShift: applies a pitch shifting to the voice. The value indicates the ratio between the new fundamental frequencies and the old ones (examples: 2.0: an octave above, 1.5: a quint above). Correct range is (1.0 -- 4), or 0 to disable effect.  	 doubleVoice: adds a second voice to the first one. The value indicates the ratio between the second voice fundamental frequency and the first one. Correct range is (1.0 -- 4), or 0 to disable effect   	 doubleVoiceLevel: the corresponding value is the level of the double voice (1.0: equal to the main voice one). Correct range is (0 -- 4).   	 doubleVoiceTimeShift: the corresponding value is the delay between the double voice and the main one. Correct range is (0 -- 0.5)   If the effect value is not available, the effect parameter remains unchanged.

        :param str pEffectName: Name of the parameter.
        :param float pEffectValue: Value of the parameter.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.setParameter(pEffectName, pEffectValue)

    def setVoice(self, pVoiceID):
        """Changes the voice used by the text-to-speech engine. The voice identifier must belong to the installed voices, that can be listed using the 'getAvailableVoices' method. If the voice is not available, it remains unchanged. No exception is thrown in this case. For the time being, only two voices are available by default : Kenny22Enhanced (English voice) and Julie22Enhanced (French voice)

        :param str pVoiceID: The voice (as a std::string).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.setVoice(pVoiceID)

    def setVolume(self, volume):
        """Sets the volume of text-to-speech output.

        :param float volume: Volume (between 0.0 and 1.0).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.setVolume(volume)

    def stopAll(self):
        """This method stops the current and all the pending tasks immediately.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.stopAll()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALTextToSpeech")
        return self.proxy.version()
