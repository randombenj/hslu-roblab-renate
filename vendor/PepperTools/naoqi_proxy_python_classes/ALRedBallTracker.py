#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alredballtrackerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALRedBallTracker(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALRedBallTracker")

    def getPosition(self):
        """Return the position of the red ball in FRAME_TORSO.

        :returns std::vector<float>: An Array of float containing the red ball position [x, y, z].
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.getPosition()

    def isActive(self):
        """Return true if the red Ball Tracker is running.

        :returns bool: true if the red Ball Tracker is running.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.isActive()

    def isNewData(self):
        """Return true if a new Red Ball was detected since the last getPosition().

        :returns bool: true if a new Red Ball was detected since the last getPosition().
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.isNewData()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.ping()

    def setWholeBodyOn(self, pWholeBodyOn):
        """If true, the tracking will be through a Whole Body Process.

        :param bool pWholeBodyOn: The whole Body state
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.setWholeBodyOn(pWholeBodyOn)

    def startTracker(self):
        """Start the tracker by Subscribing to Event redBallDetected from ALRedBallDetection module. Then Wait Event redBallDetected from ALRedBallDetection module. And finally send information to motion for head tracking. NOTE: Stiffness of Head must be set to 1.0 to move!
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.startTracker()

    def stopTracker(self):
        """Stop the tracker by Unsubscribing to Event redBallDetected from ALRedBallDetection module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.stopTracker()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALRedBallTracker")
        return self.proxy.version()
