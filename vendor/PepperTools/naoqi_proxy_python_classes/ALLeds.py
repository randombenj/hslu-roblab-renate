#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alledsproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALLeds(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALLeds")

    def createGroup(self, groupName, ledNames):
        """Makes a group name for ease of setting multiple LEDs.

        :param str groupName: The name of the group.
        :param std::vector<std::string> ledNames: A vector of the names of the LEDs in the group.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.createGroup(groupName, ledNames)

    def earLedsSetAngle(self, degrees, duration, leaveOnAtEnd):
        """An animation to show a direction with the ears.

        :param int degrees: The angle you want to show in degrees (int). 0 is up, 90 is forwards, 180 is down and 270 is back.
        :param float duration: The duration in seconds of the animation.
        :param bool leaveOnAtEnd: If true the last led is left on at the end of the animation.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.earLedsSetAngle(degrees, duration, leaveOnAtEnd)

    def fade(self, name, intensity, duration):
        """Sets the intensity of a LED or Group of LEDs within a given time.

        :param str name: The name of the LED or Group.
        :param float intensity: The intensity of the LED or Group (a value between 0 and 1).
        :param float duration: The duration of the fade in seconds
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.fade(name, intensity, duration)

    def fadeListRGB(self, name, rgbList, timeList):
        """Chain a list of color for a device, as the motion.doMove command.

        :param str name: The name of the LED or Group.
        :param AL::ALValue rgbList: List of RGB led value, RGB as seen in hexa-decimal: 0x00RRGGBB.
        :param AL::ALValue timeList: List of time to go to given intensity.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.fadeListRGB(name, rgbList, timeList)

    def fadeRGB(self, name, red, green, blue, duration):
        """Sets the color of an RGB led.

        :param str name: The name of the LED or Group.
        :param float red: the intensity of red channel (0-1).
        :param float green: the intensity of green channel (0-1).
        :param float blue: the intensity of blue channel (0-1).
        :param float duration: Time used to fade in seconds.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.fadeRGB(name, red, green, blue, duration)

    def fadeRGB2(self, name, colorName, duration):
        """Sets the color of an RGB led.

        :param str name: The name of the LED or Group.
        :param str colorName: the name of the color (supported colors: "white", "red", "green", "blue", "yellow", "magenta", "cyan")
        :param float duration: Time used to fade in seconds.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.fadeRGB(name, colorName, duration)

    def fadeRGB3(self, name, rgb, duration):
        """Sets the color of an RGB led.

        :param str name: The name of the LED or Group.
        :param int rgb: The RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.
        :param float duration: Time used to fade in seconds.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.fadeRGB(name, rgb, duration)

    def getIntensity(self, name):
        """Gets the intensity of a LED or device

        :param str name: The name of the LED or Group.
        :returns AL::ALValue: The intensity of the LED or Group.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.getIntensity(name)

    def listGroup(self, groupName):
        """Lists the devices in the group.

        :param str groupName: The name of the Group.
        :returns std::vector<std::string>: A vector of string device names.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.listGroup(groupName)

    def listGroups(self):
        """Lists available group names.

        :returns std::vector<std::string>: A vector of group names.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.listGroups()

    def listLED(self, name):
        """Lists the devices aliased by a short LED name.

        :param str name: The name of the LED to list
        :returns std::vector<std::string>: A vector of device names.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.listLED(name)

    def listLEDs(self):
        """Lists the short LED names.

        :returns std::vector<std::string>: A vector of LED names.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.listLEDs()

    def off(self, name):
        """Switch to a minimum intensity a LED or Group of LEDs.

        :param str name: The name of the LED or Group.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.off(name)

    def on(self, name):
        """Switch to a maximum intensity a LED or Group of LEDs.

        :param str name: The name of the LED or Group.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.on(name)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.ping()

    def randomEyes(self, duration):
        """Launch a random animation in eyes

        :param float duration: Approximate duration of the animation in seconds.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.randomEyes(duration)

    def rasta(self, duration):
        """Launch a green/yellow/red rasta animation on all body.

        :param float duration: Approximate duration of the animation in seconds.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.rasta(duration)

    def reset(self, name):
        """Resets the state of the leds to default (for ex, eye LEDs are white and fully on by default).

        :param str name: The name of the LED or Group (for now, only "AllLeds" are implemented).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.reset(name)

    def rotateEyes(self, rgb, timeForRotation, totalDuration):
        """Launch a rotation using the leds of the eyes.

        :param int rgb: the RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.
        :param float timeForRotation: Approximate time to make one turn.
        :param float totalDuration: Approximate duration of the animation in seconds.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.rotateEyes(rgb, timeForRotation, totalDuration)

    def setIntensity(self, name, intensity):
        """Sets the intensity of a LED or Group of LEDs.

        :param str name: The name of the LED or Group.
        :param float intensity: The intensity of the LED or Group (a value between 0 and 1).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.setIntensity(name, intensity)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLeds")
        return self.proxy.version()
