#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alvideorecorderproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALVideoRecorder(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALVideoRecorder")

    def getCameraID(self):
        """Returns current camera ID.

        :returns int: Current camera ID.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.getCameraID()

    def getColorSpace(self):
        """Returns current color space.

        :returns int: Current color space.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.getColorSpace()

    def getFrameRate(self):
        """Returns current frame rate.

        :returns int: Current frame rate.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.getFrameRate()

    def getResolution(self):
        """Returns current resolution.

        :returns int: Current resolution.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.getResolution()

    def getVideoFormat(self):
        """Returns current video format.

        :returns str: Current video format.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.getVideoFormat()

    def isRecording(self):
        """Are we currently recording a video

        :returns bool: True/False
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.isRecording()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.ping()

    def setCameraID(self, cameraID):
        """Sets camera ID.

        :param int cameraID: ID of the camera to use.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.setCameraID(cameraID)

    def setColorSpace(self, colorSpace):
        """Sets color space.

        :param int colorSpace: New color space.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.setColorSpace(colorSpace)

    def setFrameRate(self, frameRate):
        """Sets frame rate.

        :param float frameRate: New frame rate.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.setFrameRate(frameRate)

    def setResolution(self, resolution):
        """Sets resolution.

        :param int resolution: New frame resolution.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.setResolution(resolution)

    def setVideoFormat(self, videoFormat):
        """Sets video format.

        :param str videoFormat: New video format.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.setVideoFormat(videoFormat)

    def startRecording(self, folderPath, fileName):
        """Starts recording a video. Please note that only one record at a time can be made.

        :param str folderPath: Folder where the video is saved.
        :param str fileName: Filename used to save the video.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.startRecording(folderPath, fileName)

    def startRecording2(self, folderPath, fileName, overwrite):
        """Starts recording a video. Please note that only one record at a time can be made.

        :param str folderPath: Folder where the video is saved.
        :param str fileName: Filename used to save the video.
        :param bool overwrite: If false and the filename already exists, an exception is thrown.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.startRecording(folderPath, fileName, overwrite)

    def stopRecording(self):
        """Stops a video record that was launched with startRecording(). The function returns the number of frames that were recorded, as well as the video absolute file name.

        :returns AL::ALValue: Array of two elements [numRecordedFrames, recordAbsolutePath]
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.stopRecording()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALVideoRecorder")
        return self.proxy.version()
