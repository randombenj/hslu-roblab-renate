#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alconnectionmanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALConnectionManager(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALConnectionManager")

    def connect(self, arg1):
        """

        :param str arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.connect(arg1)

    def countries(self):
        """

        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.countries()

    def country(self):
        """

        :returns str: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.country()

    def disableTethering(self, arg1):
        """

        :param str arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.disableTethering(arg1)

    def disconnect(self, arg1):
        """

        :param str arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.disconnect(arg1)

    def enableTethering(self, arg1, arg2, arg3):
        """

        :param str arg1: arg
        :param str arg2: arg
        :param str arg3: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.enableTethering(arg1, arg2, arg3)

    def enableTethering2(self, arg1):
        """

        :param str arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.enableTethering(arg1)

    def forget(self, arg1):
        """

        :param str arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.forget(arg1)

    def getTetheringEnable(self, arg1):
        """

        :param str arg1: arg
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.getTetheringEnable(arg1)

    def interfaces(self):
        """

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.interfaces()

    def scan(self, arg1):
        """

        :param str arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.scan(arg1)

    def scan2(self):
        """
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.scan()

    def service(self, arg1):
        """

        :param str arg1: arg
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.service(arg1)

    def services(self):
        """

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.services()

    def setCountry(self, arg1):
        """

        :param str arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.setCountry(arg1)

    def setServicesession(self, arg1):
        """

        :param AL::ALValue arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.setServicesession(arg1)

    def setServiceInput(self, arg1):
        """

        :param AL::ALValue arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.setServiceInput(arg1)

    def state(self):
        """

        :returns str: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.state()

    def technologies(self):
        """

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.technologies()

    def tetheringName(self, arg1):
        """

        :param str arg1: arg
        :returns str: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.tetheringName(arg1)

    def tetheringPassphrase(self, arg1):
        """

        :param str arg1: arg
        :returns str: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALConnectionManager")
        return self.proxy.tetheringPassphrase(arg1)
