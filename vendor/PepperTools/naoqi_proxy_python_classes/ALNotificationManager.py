#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alnotificationmanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALNotificationManager(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALNotificationManager")

    def add(self, notification):
        """Add a notification.

        :param AL::ALValue notification: Contain information for the notification
        :returns int: Notification ID.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALNotificationManager")
        return self.proxy.add(notification)

    def notification(self, notificationId):
        """Get one notification.

        :param int notificationId: Notification ID.
        :returns AL::ALValue: ALValue containing a Notification.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALNotificationManager")
        return self.proxy.notification(notificationId)

    def notifications(self):
        """Get the all array of pending notifications.

        :returns AL::ALValue: An array of pending notification.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALNotificationManager")
        return self.proxy.notifications()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALNotificationManager")
        return self.proxy.ping()

    def remove(self, notificationId):
        """Remove a notification.

        :param int notificationId: Notification ID to remove.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALNotificationManager")
        return self.proxy.remove(notificationId)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALNotificationManager")
        return self.proxy.version()
