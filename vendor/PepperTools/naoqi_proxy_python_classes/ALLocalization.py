#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/allocalizationproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALLocalization(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALLocalization")

    def clear(self, pDirectory):
        """Delete all panoramas in a directory.

        :param str pDirectory: Name of the directory
        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.clear(pDirectory)

    def getCurrentPanoramaDescriptor(self):
        """Get some information about the current panorama.

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.getCurrentPanoramaDescriptor()

    def getFrame(self, arg1, arg2):
        """Get a frame buffer.

        :param int arg1: arg
        :param str arg2: arg
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.getFrame(arg1, arg2)

    def getMessageFromErrorCode(self, arg1):
        """

        :param int arg1: arg
        :returns str: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.getMessageFromErrorCode(arg1)

    def getRobotOrientation(self):
        """Get the robot orientation.

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.getRobotOrientation()

    def getRobotOrientation2(self, arg1):
        """Get the robot orientation.

        :param bool arg1: arg
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.getRobotOrientation(arg1)

    def getRobotPosition(self):
        """Get the robot position in world navigation.

        :returns std::vector<float>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.getRobotPosition()

    def getRobotPosition2(self, arg1):
        """Get the robot position in world navigation.

        :param bool arg1: arg
        :returns std::vector<float>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.getRobotPosition(arg1)

    def goToHome(self):
        """Go to the robot home.

        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.goToHome()

    def goToPosition(self, arg1):
        """Go to a given position.

        :param std::vector<float> arg1: arg
        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.goToPosition(arg1)

    def isDataAvailable(self):
        """

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.isDataAvailable()

    def isInCurrentHome(self):
        """Is the robot in its home?

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.isInCurrentHome()

    def isInGivenZone(self, arg1, arg2, arg3, arg4):
        """

        :param float arg1: arg
        :param float arg2: arg
        :param float arg3: arg
        :param float arg4: arg
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.isInGivenZone(arg1, arg2, arg3, arg4)

    def isRelocalizationRequired(self):
        """

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.isRelocalizationRequired()

    def learnHome(self):
        """Learn the robot home.

        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.learnHome()

    def load(self, pDirectory):
        """Loads panoramas from a directory in the default one.

        :param str pDirectory: Name of the directory
        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.load(pDirectory)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.ping()

    def save(self, pDirectory):
        """Save the temporary panoramas in a directory from the default one.

        :param str pDirectory: Name of the directory
        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.save(pDirectory)

    def stopAll(self):
        """Stop all robot movements.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.stopAll()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLocalization")
        return self.proxy.version()
