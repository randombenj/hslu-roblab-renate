#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alpreferencemanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALPreferenceManager(object):
    def __init__(self, session):
        self.proxy = None 
        self.session = session

    def force_connect(self):
        self.proxy = self.session.service("ALPreferenceManager")

    def getDomainList(self):
        """Get available preferences domain

        :returns std::vector<std::string>: a list containing all the available domain names
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.getDomainList()

    def getValue(self, domain, setting):
        """Get specified preference

        :param str domain: Preference domain
        :param str setting: Preference setting
        :returns AL::ALValue: corresponding preferences value
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.getValue(domain, setting)

    def getValueList(self, domain):
        """Get preferences names and values for a given domain

        :param str domain: Preference domain
        :returns std::vector<std::vector<AL::ALValue> >: a list of preferences names and values associated to the domain
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.getValueList(domain)

    def importPrefFile(self, domain, applicationName, filename, override):
        """Import a preferences XML file

        :param str domain: Preference domain: all preferences values found in XML file will be imported in that domain.
        :param str applicationName: Application name: will be used to search for preference file on disk (in location of type <sessiondirectory>/applicationName/filename).
        :param str filename: Preference XML filename
        :param bool override: Set this to true if you want to override preferences that already exist with preferences in imported XML file
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.importPrefFile(domain, applicationName, filename, override)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.ping()

    def removeDomainValues(self, domain):
        """Remove an entire preference domain

        :param str domain: Preference domain
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.removeDomainValues(domain)

    def removeValue(self, domain, setting):
        """Remove specified preference

        :param str domain: Preference domain
        :param str setting: Preference setting
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.removeValue(domain, setting)

    def setValue(self, domain, setting, value):
        """Set specified preference

        :param str domain: Preference domain
        :param str setting: Preference setting
        :param AL::ALValue value: Preference value
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.setValue(domain, setting, value)

    def update(self):
        """Synchronizes local preferences with preferences stored on a server.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.update()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPreferenceManager")
        return self.proxy.version()
